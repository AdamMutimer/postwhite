#! /bin/bash
#
# Postwhite Automatic Postcreen Whitelist Generator
#
# Version 1.5
# By Steve Jenkins (http://stevejenkins.com/)
#
# Usage: place postwhite directory in /usr/local/bin then 
# run ./postwhite
#
# Requires spf-tools (https://github.com/jsarenik/spf-tools)
# Requires ipcalc (http://jodies.de/ipcalc)

# Thanks to Mike Miller (mmiller@mgm51.com) for gwhitelist.sh script
# Thanks to Jose Borges Ferreira for CIDR normalization via ipcalc

# USER-DEFINABLE OPTIONS

# spf-tools location (REQUIRED)
spftoolspath=/usr/local/bin/spf-tools

# ipcalc location (REQUIRED)
ipcalc=/usr/local/bin/postwhite/ipcalc/ipcalc

# How to treat invalid IPv4 CIDRs (keep / strip / fix)
badCIDR=strip

# File Paths
postfixpath=/etc/postfix
postfixbinarypath=/usr/sbin
whitelist=postscreen_spf_whitelist.cidr

# Toggle senders you want to include

# Webmail Providers
google=no
microsoft=yes

#Social Networks
facebook=no
twitter=no
linkedin=no

# Bulk Senders
amazon=no
mailchimp=no
exacttarget=no

# Reload Postfix Automatically when done?
reloadpostfix=no

# NO NEED TO EDIT PAST THIS LINE

# Create temporary files
tmpBase=`basename $0`
tmp1=`mktemp -q /tmp/${tmpBase}.XXXXXX`
tmp2=`mktemp -q /tmp/${tmpBase}.XXXXXX`
	if [ $? -ne 0 ]; then
		echo "$0: Can't create temp file, exiting..."
		exit 1
	fi

# abort on any error
set -e

# Create CIDR normalization function

function normalize_cidr() {
	# split by ":"
	local array=(${ip/:/ });
	if [ "x${array[0]}" = "xip4" ] ; then
		# check if is a CIDR
		if [[ ${array[1]} == *"/"* ]]
		then
			IP=$($ipcalc -b ${array[1]} | awk '/^Network/ {print $2}');
		else
			IP=${array[1]}
		fi
	else
		IP=${array[1]}
	fi
	echo $IP
}

if [ "$google" == "yes" ]; then

	${spftoolspath}/despf.sh google.com >> ${tmp1}

fi

if [ "$microsoft" == "yes" ]; then

	${spftoolspath}/despf.sh outlook.com >> ${tmp1}

	${spftoolspath}/despf.sh hotmail.com >> ${tmp1}

fi

if [ "$facebook" == "yes" ]; then

	${spftoolspath}/despf.sh facebookmail.com >> ${tmp1}

fi

if [ "$twitter" == "yes" ]; then

	${spftoolspath}/despf.sh twitter.com >> ${tmp1}

fi

if [ "$linkedin" == "yes" ]; then

	${spftoolspath}/despf.sh linkedin.com >> ${tmp1}

fi

if [ "$amazon" == "yes" ]; then

	${spftoolspath}/despf.sh amazon.com >> ${tmp1}

fi

if [ "$mailchimp" == "yes" ]; then

	${spftoolspath}/despf.sh mailchimp.com >> ${tmp1}

fi

if [ "$exacttarget" == "yes" ]; then

	${spftoolspath}/despf.sh exacttarget.com >> ${tmp1}

fi

# Check for invalid CIDRs and format the whitelist

if [ "$badCIDR" == "fix" ] ; then

	for ip in `cat  ${tmp1}` ; do
		ip=$(normalize_cidr  $ip);
		echo -ne "$ip\tpermit\n"
	done >> ${tmp2}

elif [ "$badCIDR" == "strip" ] ; then

	for ip in `cat  ${tmp1}` ; do
		origip=$( echo "$ip" | cut -d\: -f2 )
		ip=$(normalize_cidr $ip);
		
		if [ "$origip" == "$ip" ] ; then
			echo -ne "$origip\tpermit\n"
		fi
	done >> ${tmp2}

elif [ "$badCIDR" == "keep" ] ; then

	printf "%s\n" | grep "^ip" ${tmp1} | cut -c5- | sed s/$/'	permit'/ > ${tmp2}
fi

# Sort and unique the final list and write to Postfix directory
sort -u ${tmp2} > ${postfixpath}/${whitelist}

# Remove temp files
#test -e ${tmp1} && rm ${tmp1}
#test -e ${tmp2} && rm ${tmp2}

# Reload Postfix to pick up any changes
if [ "$reloadpostfix" == "yes" ]; then
	${postfixbinarypath}/postfix reload
fi
