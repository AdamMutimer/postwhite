#! /bin/bash
#
# Postwhite - Automatic Postcreen Whitelist Generator
#
# By Steve Jenkins (http://stevejenkins.com/)
  version=1.10
# Last updated: 27 Nov 2015
#
# Usage: place entire postwhite directory in /usr/local/bin then 
# run ./postwhite
#
# Requires spf-tools (https://github.com/jsarenik/spf-tools)
# Requires ipcalc (http://jodies.de/ipcalc)

# Thanks to Mike Miller (mmiller@mgm51.com) for gwhitelist.sh script
# Thanks to Jose Borges Ferreira for IPv4 normalization help

# USER-DEFINABLE OPTIONS

# spf-tools location (REQUIRED)
spftoolspath=/usr/local/bin/spf-tools

# ipcalc location (REQUIRED)
ipcalc=/usr/local/bin/postwhite/ipcalc/ipcalc

# Do this to invalid IPv4 addresses and CIDRs (keep / strip / fix)
badip4=strip

# Paths
postfixpath=/etc/postfix
postfixbinarypath=/usr/sbin
whitelist=postscreen_spf_whitelist.cidr

# Toggle senders you want to include below

# Webmail Providers
google=yes
microsoft=yes

#Social Networks
facebook=yes
twitter=yes
linkedin=yes

# Bulk Senders
amazon=no
mailchimp=no
exacttarget=no

# Reload Postfix Automatically when done?
reloadpostfix=yes

# NO NEED TO EDIT PAST THIS LINE

# abort on any error
set -e

# Create temporary files
tmpBase=$(basename "$0")
tmp1=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
tmp2=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
tmp3=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
	if [ $? -ne 0 ]; then
		echo "$0: Can't create temp file, exiting..."
		exit 1
	fi

# Create IPv4 normalization function
function normalize_ipv4() {
	# split by ":"
	local array=(${ip/:/ });
	if [ "x${array[0]}" = "xip4" ] ; then
		# check if is a CIDR
		if [[ ${array[1]} == *"/"32 ]] ; then
			IP=${array[1]}
		elif [[ ${array[1]} == *"/"* ]] ; then
			IP=$($ipcalc -b "${array[1]}" | awk '/^Network/ {print $2}');
		else
			IP=${array[1]}
		fi
	else
		IP=${array[1]}
	fi
	echo "$IP"
}

# Recursively query selected mailers' SPF records
if [ "$google" == "yes" ]; then
	${spftoolspath}/despf.sh google.com >> "${tmp1}"
fi

if [ "$microsoft" == "yes" ]; then
	${spftoolspath}/despf.sh outlook.com >> "${tmp1}"
	${spftoolspath}/despf.sh hotmail.com >> "${tmp1}"
fi

if [ "$facebook" == "yes" ]; then
	${spftoolspath}/despf.sh facebookmail.com >> "${tmp1}"
fi

if [ "$twitter" == "yes" ]; then
	${spftoolspath}/despf.sh twitter.com >> "${tmp1}"
fi

if [ "$linkedin" == "yes" ]; then
	${spftoolspath}/despf.sh linkedin.com >> "${tmp1}"
fi

if [ "$amazon" == "yes" ]; then
	${spftoolspath}/despf.sh amazon.com >> "${tmp1}"
fi

if [ "$mailchimp" == "yes" ]; then
	${spftoolspath}/despf.sh mailchimp.com >> "${tmp1}"
fi

if [ "$exacttarget" == "yes" ]; then
	${spftoolspath}/despf.sh exacttarget.com >> "${tmp1}"
fi

# Check for invalid IPv4 addresses/CIDRs, then format the whitelist
if [ "$badip4" == "fix" ] ; then
	for ip in $(cat  "${tmp1}") ; do
		ip=$(normalize_ipv4  "$ip");
		if [ -n "$ip" ] ; then
			echo -ne "$ip\tpermit\n"
		fi
	done >> "${tmp2}"
elif [ "$badip4" == "strip" ] ; then
	for ip in $(cat "${tmp1}") ; do
		iptype=$( echo "$ip" | cut -d\: -f1 )
		origip=$( echo "$ip" | cut -d\: -f2 )
		ip=$(normalize_ipv4 "$ip");
		if [ "$origip" == "$ip" ] ; then
			echo -ne "$ip\tpermit\n"
		elif [ "$iptype" == "ip6" ] ; then
			echo -ne "$ip\tpermit\n"
		fi
		done >> "${tmp2}"
elif [ "$badip4" == "keep" ] ; then

	printf "%s\n" | grep "^ip" "${tmp1}" | cut -c5- | sed s/$/'	permit'/ > "${tmp2}"
fi

# Sort and unique the final list and write finalized whitelist to Postfix directory
sort -V -u "${tmp2}" > "${tmp3}"
numentries=$(cat "${tmp3}" | wc -l)
echo -e "# Generated by Postwhite v$version on $(date)\n# https://github.com/stevejenkins/postwhite/\n# $numentries total entries" > "${postfixpath}"/"${whitelist}"
cat "${tmp3}" >> "${postfixpath}"/"${whitelist}"

# Remove temp files
test -e "${tmp1}" && rm "${tmp1}"
test -e "${tmp2}" && rm "${tmp2}"
test -e "${tmp3}" && rm "${tmp3}"

# Reload Postfix to pick up changes in whitelist
if [ "$reloadpostfix" == "yes" ]; then
	${postfixbinarypath}/postfix reload
fi

exit
