#!/bin/bash

###########################################################################
# Query Mailer - Generates a Postscreen whitelist for a mailhost that     #
# doesn't publish their outbound mailer IPs via SPF records               #
# https://github.com/stevejenkins/postwhite                               #
###########################################################################

# By Jesse Norell (https://github.com/jnorell)
# and Steve Jenkins (https://www.stevejenkins.com/)

version="1.1"
lastupdated="16 April 2018"

whitelist_file="/etc/postfix/postscreen_ovh_whitelist.cidr"

# set debug=true to display output as this script runs
debug=true

###########################################################################
        
# This script uses "mail-out.ovh.net" as a working example of a mailhost
# that does not publish their outbound mailer IP address via SPF records. To
# use this script as a template for additional hosts:

# 1. Copy this script to a new unique filename
# 2. Edit the script's mailhost and numerical range values as required
# 3. Set a unique output file (/etc/postfix/postscreen_*_whitelist.cidr)
# 4. Configure cron to run the new script as often as you like
# 5. Include the output file in Postfix's postscreen_access_list parameter

###########################################################################

# If debug=true, show script commands as they are run
[ "${debug}" = true ] && set -x

# If debug=true, print message output, else hide it
if [ "${debug}" = true ]; then
    function debug() { printf "$@"; }
else
    function debug() { :; }
fi

umask 022

# create tmp file
temp_file=$(mktemp --tmpdir ovh_hosts.XXXXXXXXXX)

# clean up tmp file on exit
trap "rm -f ${temp_file};" EXIT

debug "Querying outbound IP addresses. This could take a while...\n"

# Query user-defined mailer range

for a in {1..99};
        do for b in {1..300};
                do host ${a}.mo${b}.mail-out.ovh.net;
        done;
done > "${temp_file}"

# Format queried hosts

debug "Formatting custom whitelist...\n"

grep 'has address' "${temp_file}" | awk '{print $4 " permit"}' | sort -uV  > "${whitelist_file}"

# Restart Postfix

debug "Restarting Postfix...\n"

[ "${debug}" = true ] && postfix reload || postfix reload 2>/dev/null

# All done!

debug "Done!\n"

exit
